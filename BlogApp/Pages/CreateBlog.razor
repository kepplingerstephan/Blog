@page "/CreateBlog"
@using System.Text.Json;
@using Core.Interfaces;
@using System.Text;
@using global::Data.Dtos;
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<CreateBlog> Logger

<h3>CreateBlog</h3>
@if (Topics is not null && Users is not null)
{
	<EditForm Model="Model">
		<MudSelect T="int" Label="User" Variant="Variant.Outlined" @bind-Value="Model.UserId">
			@foreach (var item in Users)
			{
				<MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
			}
		</MudSelect>
		<MudSelect T="int" Label="User" Variant="Variant.Outlined" @bind-Value="Model.TopicId">
			@foreach (var item in Topics)
			{
				<MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
			}
		</MudSelect>

		<MudTextField T="string" Label="Outlined" Variant="Variant.Outlined" Text="@Model.Content" Lines="3" />

		<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</MudButton>
	</EditForm>
}

@code {
	private BlogCreateEditDto Model { get; set; } = new();
	public HttpClient Client { get; set; }
	public List<TopicDto> Topics { get; set; }
	public List<UserDto> Users { get; set; }

	protected async override Task OnInitializedAsync()
	{
		Client = HttpClientFactory.CreateClient("api");

		var userResponse = await GetFromUrlAsync<APIResponse<UserDto>>("user", Client);
		Users = (userResponse.Result as ICollection<UserDto>).ToList();
		Logger.LogInformation(JsonSerializer.Serialize(Users));

		var topicResponse = await GetFromUrlAsync<APIResponse<TopicDto>>("topic", Client);
		Topics = (topicResponse.Result as ICollection<TopicDto>).ToList();
		StateHasChanged();
	}

	private async Task OnValidSubmit()
	{
		if (Model.UserId <= 0 || Model.TopicId <= 0)
			return;
		Model.Created = DateTime.Now;
		Model.Updated = DateTime.Now;
		var response = await PostToUrlAsync<APIResponse<BlogDto>>("blog/create", Model, Client);
	}

	static JsonSerializerOptions Options { get; } = new JsonSerializerOptions()
		{
			Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
			PropertyNameCaseInsensitive = true
		};

	public static async Task<T> GetFromUrlAsync<T>(string url, HttpClient client, CancellationToken token = default)
	{
		HttpResponseMessage response = await client.GetAsync(url);
		response.EnsureSuccessStatusCode();
		var responseBody = await response.Content.ReadAsStringAsync() ?? throw new ArgumentException("Response is null");
		return JsonSerializer.Deserialize<T>(responseBody, Options) ?? throw new ArgumentException($"Json could not deserialize this string: {responseBody}");
	}
	public static async Task<T> PostToUrlAsync<T>(string url, object bodyObject, HttpClient client, CancellationToken token = default)
	{
		string body = JsonSerializer.Serialize(bodyObject, Options);
		var request = new HttpRequestMessage(HttpMethod.Post, url)
			{
				Content = new StringContent(body, Encoding.UTF8, "application/json")
			};
		var response = await client.SendAsync(request);
		response.EnsureSuccessStatusCode();
		var responseBody = response.Content.ReadAsStringAsync().Result ?? throw new ArgumentException("Reponse of api is null");
		return JsonSerializer.Deserialize<T>(responseBody, Options) ?? throw new ArgumentException($"Json could not deserialize this string: {responseBody}");
	}
}
